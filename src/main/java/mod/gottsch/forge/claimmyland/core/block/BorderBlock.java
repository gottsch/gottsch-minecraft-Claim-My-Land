package mod.gottsch.forge.claimmyland.core.block;

import mod.gottsch.forge.gottschcore.block.FacingBlock;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.RandomSource;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.SimpleWaterloggedBlock;
import net.minecraft.world.level.block.StairBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.block.state.properties.BooleanProperty;
import net.minecraft.world.level.block.state.properties.EnumProperty;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.material.Fluids;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.VoxelShape;

/**
 * NOTE the difference between this and a BorderStone block.
 * this block is generated by FoundationStone and BorderStone blocks.
 * this block is a generated border block in the world.
 * BorderStone is a block the player can craft and hold to initiate border display.
 * @author Mark Gottschling on Sep 16, 2024
 *
 */
public class BorderBlock extends FacingBlock implements IBorderBlock, SimpleWaterloggedBlock {

    // vanilla waterlogged state
    public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
    // state to indicate whether the border is intersecting another parcel
    public static final EnumProperty<BorderStatus> INTERSECTS = EnumProperty.create("intersects", BorderStatus.class);
    // the position type of a wireframe-like border this block is currently in.
    public static final EnumProperty<BorderPosition> POSITION = EnumProperty.create("position", BorderPosition.class);

    // TODO this will have to change either to almost full block or the shape of each block
    private static final VoxelShape SHAPE = Block.box(0.01D, 0.01D, 0.01D, 15.99D, 15.99D, 15.99D);

    private static final VoxelShape NORTH_LEFT = Block.box(0D, 0D, 0D, 2D, 16, 2);
    private static final VoxelShape NORTH_RIGHT = Block.box(14, 0, 0, 16, 16, 2);
    private static final VoxelShape SOUTH_LEFT = Block.box(14D, 0D, 14D, 16D, 16D, 16D);
    private static final VoxelShape SOUTH_RIGHT = Block.box(0, 0, 14, 2, 16, 16);

    private static final VoxelShape NORTH_TOP = Block.box(0, 14, 0, 16, 16, 2);
    private static final VoxelShape NORTH_BOTTOM = Block.box(0, 0, 0, 16, 2, 2);
    private static final VoxelShape SOUTH_TOP = Block.box(0, 14, 14, 16, 16, 16);
    private static final VoxelShape SOUTH_BOTTOM = Block.box(0, 0, 14, 16, 2, 16);

    private static final VoxelShape EAST_TOP = Block.box(14, 14, 0, 16, 16, 16);
    private static final VoxelShape EAST_BOTTOM = Block.box(14, 0, 0, 16, 2, 16);
    private static final VoxelShape WEST_TOP = Block.box(0, 14, 0, 2, 16, 16);
    private static final VoxelShape WEST_BOTTOM = Block.box(0, 0, 0, 2, 2, 16);


    public BorderBlock(Properties properties) {
        super(properties);
        this.registerDefaultState(this.stateDefinition.any()
                .setValue(WATERLOGGED, Boolean.valueOf(false))
                .setValue(INTERSECTS, BorderStatus.GOOD)
                .setValue(POSITION, BorderPosition.TOP));
        StairBlock b;
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        super.createBlockStateDefinition(builder);
        builder.add(WATERLOGGED).add(INTERSECTS).add(POSITION);
    }

    @Override
    public void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
//        if (level.getGameTime() % 2 == 0) {
            tick(state, level, pos, random);
//        }
    }

    @Override
    public void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
        level.setBlockAndUpdate(pos, Blocks.AIR.defaultBlockState());
    }

    @Override
    public VoxelShape getShape(BlockState state, BlockGetter getter, BlockPos pos, CollisionContext context) {

        Direction direction = state.getValue(FACING);
        BorderPosition position = state.getValue(POSITION);

        VoxelShape shape = switch(position) {
            case RIGHT-> switch(direction) {
                case SOUTH -> SOUTH_RIGHT;
                default -> NORTH_RIGHT;
            };
            case LEFT -> switch(direction) {
                case SOUTH -> SOUTH_LEFT;
                default -> NORTH_LEFT;
            };
            case TOP -> switch(direction) {
                case SOUTH -> SOUTH_TOP;
                case EAST -> EAST_TOP;
                case WEST -> WEST_TOP;
                default -> NORTH_TOP;
            };
            case BOTTOM -> switch(direction) {
                case SOUTH -> SOUTH_BOTTOM;
                case EAST -> EAST_BOTTOM;
                case WEST -> WEST_BOTTOM;
                default -> NORTH_BOTTOM;
            };
            default -> SHAPE;
        };

        return shape;
    }

    /**
     * This method returns the state of the block so that the correct entry in the
     * blockstate.json file can be selected and the corresponding block model
     * rendered.
     */
    @Override
    public BlockState getStateForPlacement(BlockPlaceContext context) {
        BlockPos blockPos = context.getClickedPos();
        FluidState fluidState = context.getLevel().getFluidState(blockPos);

        return this.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidState.getType() == Fluids.WATER));
    }

    @Override
    public BlockState updateShape(BlockState state, Direction direction, BlockState newState, LevelAccessor levelAccessor, BlockPos pos, BlockPos p_56930_) {
        if (state.getValue(WATERLOGGED)) {
            levelAccessor.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(levelAccessor));
        }
        return super.updateShape(state, direction, newState, levelAccessor, pos, p_56930_);
    }

    @Override
    public FluidState getFluidState(BlockState blockState) {
        return blockState.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(blockState);
    }
}
