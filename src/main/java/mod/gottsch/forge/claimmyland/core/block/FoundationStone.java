/*
 * This file is part of  Claim My Land.
 * Copyright (c) 2024 Mark Gottschling (gottsch)
 *
 * All rights reserved.
 *
 * Claim My Land is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Claim My Land is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Claim My Land.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */
package mod.gottsch.forge.claimmyland.core.block;

import mod.gottsch.forge.claimmyland.ClaimMyLand;
import mod.gottsch.forge.claimmyland.core.block.entity.BorderStoneBlockEntity;
import mod.gottsch.forge.claimmyland.core.block.entity.FoundationStoneBlockEntity;
import mod.gottsch.forge.gottschcore.block.FacingBlock;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityTicker;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.EnumProperty;
import org.jetbrains.annotations.Nullable;

// TODO add the moment this does not extend BorderStone
// and therefor does not tick. it needs to tick to check it's expire date
// and self destruct if threshold is met.
// TODO nice to have would be to update the border with a transparency
// as time goes on. however this probably would require a lot of block model jsons
/**
 * Created by Mark Gottschling on Sep 14, 2024.
 * a foundation stone can only be used to display a potential parcel and to claim a parcel.
 * it can only be generated by using a deed ie not craftable or available in the creative menu.
 */
public abstract class FoundationStone extends BaseEntityBlock implements EntityBlock {
    public static final EnumProperty<Direction> FACING = EnumProperty.create("facing", Direction.class);

    public FoundationStone(Properties properties) {
        super(properties);
        this.registerDefaultState((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.NORTH));
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(FACING);
    }

    @Override
    public RenderShape getRenderShape(BlockState state) {
        return RenderShape.MODEL;
    }

    /**
     * execute the block entity ticker
     * @param level
     * @param state
     * @param type
     * @return
     * @param <T>
     */
    @javax.annotation.Nullable
    @Override
    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState state, BlockEntityType<T> type) {
        if (!level.isClientSide()) {
            return (lvl, pos, blockState, t) -> {
                if (t instanceof BorderStoneBlockEntity entity) { // test and cast
                    entity.tickServer();
                }
            };
        } else {
            return null;
        }
    }

    /**
     * Called whenever the block is remove - either destroyed by player or level.destroyBlock()
     * @param state
     * @param level
     * @param pos
     * @param state2
     * @param b
     */
    @Override
    public void onRemove(BlockState state, Level level, BlockPos pos, BlockState state2, boolean b) {
        if (!level.isClientSide()) {
            FoundationStoneBlockEntity blockEntity = (FoundationStoneBlockEntity) level.getBlockEntity(pos);
            if (blockEntity != null) {
                /*
                 * NOTE the stone and border will be removed, but if the stone is caused by
                 * onDestroyedByPlayer(), then the owning Deed will still contain the
                 * pos of this block. Checks must be added to the Deed to ensure that the old
                 * stone exists before attempting to remove it. This is because the Deed
                 * adds a new stone and then attempts to remove the old stone. But if the
                 * stones are in the same location, weird things happen.
                 */
                blockEntity.removeParcelBorder();
            }
        }
        super.onRemove(state, level, pos, state2, b);
    }

    @Override
    public BlockState getStateForPlacement(BlockPlaceContext context) {
        BlockState blockState = this.defaultBlockState().setValue(FACING,
                context.getHorizontalDirection().getOpposite());
        return blockState;
    }

    @Override
    public BlockState rotate(BlockState state, Rotation rot) {
        return state.setValue(FACING, rot.rotate(state.getValue(FACING)));
    }

    @Override
    public BlockState mirror(BlockState state, Mirror mirrorIn) {
        return state.rotate(mirrorIn.getRotation(state.getValue(FACING)));
    }
}
